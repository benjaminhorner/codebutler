var mout = require('mout');
var rc = require('./util/rc');
var defaults = require('./util/defaults');
var expand = require('./util/expand');

/**
 * Description
 * @method Config
 * @param {} cwd
 * @return 
 */
function Config(cwd) {
    this._cwd = cwd || process.cwd();
    this._config = {};
}

/**
 * Description
 * @method load
 * @return ThisExpression
 */
Config.prototype.load = function () {
    this._config = rc('bower', defaults, this._cwd);
    return this;
};

/**
 * Description
 * @method get
 * @param {} key
 * @return 
 */
Config.prototype.get = function (key) {
    // TODO
};

/**
 * Description
 * @method set
 * @param {} key
 * @param {} value
 * @return ThisExpression
 */
Config.prototype.set = function (key, value) {
    // TODO
    return this;
};

/**
 * Description
 * @method del
 * @param {} key
 * @param {} value
 * @return ThisExpression
 */
Config.prototype.del = function (key, value) {
    // TODO
    return this;
};

/**
 * Description
 * @method save
 * @param {} where
 * @param {} callback
 * @return 
 */
Config.prototype.save = function (where, callback) {
    // TODO
};

/**
 * Description
 * @method toObject
 * @return config
 */
Config.prototype.toObject = function () {
    var config = mout.lang.deepClone(this._config);

    config = Config.normalise(config);
    return config;
};

/**
 * Description
 * @method create
 * @param {} cwd
 * @return NewExpression
 */
Config.create = function (cwd) {
    return new Config(cwd);
};

/**
 * Description
 * @method read
 * @param {} cwd
 * @return CallExpression
 */
Config.read = function (cwd) {
    var config = new Config(cwd);
    return config.load().toObject();
};

/**
 * Description
 * @method normalise
 * @param {} rawConfig
 * @return config
 */
Config.normalise = function (rawConfig) {
    var config = {};

    // Mix in defaults and raw config
    mout.object.deepMixIn(config, expand(defaults), expand(rawConfig));

    // Some backwards compatible things..
    config.shorthandResolver = config.shorthandResolver
    .replace(/\{\{\{/g, '{{')
    .replace(/\}\}\}/g, '}}');

    // Ensure that every registry endpoint does not end with /
    config.registry.search = config.registry.search.map(function (url) {
        return url.replace(/\/+$/, '');
    });
    config.registry.register = config.registry.register.replace(/\/+$/, '');
    config.registry.publish = config.registry.publish.replace(/\/+$/, '');

    return config;
};

Config.DEFAULT_REGISTRY = defaults.registry;

module.exports = Config;
