

    /**
     * Debounce callback execution
     */
    /**
     * Description
     * @method debounce
     * @param {} fn
     * @param {} threshold
     * @param {} isAsap
     * @return debounced
     */
    function debounce(fn, threshold, isAsap){
        var timeout, result;
        /**
         * Description
         * @method debounced
         * @return result
         */
        function debounced(){
            var args = arguments, context = this;
            /**
             * Description
             * @method delayed
             * @return 
             */
            function delayed(){
                if (! isAsap) {
                    result = fn.apply(context, args);
                }
                timeout = null;
            }
            if (timeout) {
                clearTimeout(timeout);
            } else if (isAsap) {
                result = fn.apply(context, args);
            }
            timeout = setTimeout(delayed, threshold);
            return result;
        }
        return debounced;
    }

    module.exports = debounce;


